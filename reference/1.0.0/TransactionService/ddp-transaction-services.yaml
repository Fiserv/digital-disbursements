#-------------------------------------
# Initial Version
#-------------------------------------
openapi: 3.0.0
info:
  version: 0.0.3
  title: Digital Disbursement Platform Transactions APIs.
  description: >-
    This Specification document lists the APIs required to fetch historical transactions.

servers:
  - url:  https://qa.api.firstdata.com
    description: This url is for QA testing.
  - url:  https://int.api.firstdata.com
    description: This url is for customer testing.
  - url: https://prod.api.firstdata.com
    description: This is production url.

paths:
  /ddp/v1/transactions/recipients/{merchantCustomerId}:
    get:
      x-group-name: Transaction Service
      x-proxy-name: Get Transactions by Recipient Id
      # x-child-product-name: Transaction Service
      tags:
        - Digital Disbursement Platform Transactions APIs.
      description: This API returns all transactions associated with recipient. This included transactions Initialized and Disbursed both.
      parameters:
        - in: header
          name: Api-Key
          description: An API key is a string value passed by a client app to the API proxies. The key uniquely identifies the client app.
          required: true
          schema: {
	        type: string,
	        default: "Api-Key"
	      }
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema: {
	        type: string,
	        default: "Timestamp"
	      }
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema: {
	        type: string,
	        default: "Authorization"
	      }
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions, which for payments could cost the client issues like double-billing.
          required: true
          schema: {
	        type: string,
	        default: "Client-Request-Id"
	      }
        - in: header
          name: Content-Type
          description: >-
           used to indicate the media type of the resource.
          required: true
          schema: {
          type: string,
	        default: "Content-Type"
	      }
        - in: path
          name: merchantCustomerId
          description:  Unique Id associated with recipient while set up.The value can be MerchantCustomerId or RecipientId.Merchant provision through Apigee should always pass MerchantCustomerId.
          required: true
          schema: {
	        type: string,
	        default: "merchantCustomerId"
	      }
        - in: query
          name: start
          description:  Date range - start
          required: false
          allowEmptyValue: false
          schema: {
	        type: string,
	        default: "start"
	      }
        - in: query
          name: end
          description:  Date range - end
          required: false
          allowEmptyValue: false
          schema: {
	        type: string,
	        default: "end"
	      }
        - in: query
          name: pageNo
          description:  Page number
          required: false
          allowEmptyValue: false
          schema:
            type: integer
        - in: query
          name: pageSize
          description:  Page pageSize
          required: false
          allowEmptyValue: false
          schema:
            type: integer

      responses:
        '200':
          description: Transactions response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipientTransactionRespsone'
        '400':
          description:  Transactions response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Transactions response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Transactions response - Recipient not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Transactions response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /ddp/v1/transactions/recipients/{merchantTransactionId}:
    get:
      x-group-name: Transaction Service
      x-proxy-name: Get Transactions by MerchantTransaction  Id
      # x-child-product-name: Transaction Service
      tags:
        - Digital Disbursement Platform Transactions APIs.
      description: This API returns all transactions associated with recipient MerchantTransaction Id . This included transactions Initialized and Disbursed both.
      parameters:
        - in: header
          name: Api-Key
          description: An API key is a string value passed by a client app to the API proxies. The key uniquely identifies the client app.
          required: true
          schema: {
	        type: string,
	        default: "Api-Key"
	      }
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema: {
	        type: string,
	        default: "Timestamp"
	      }
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema: {
	        type: string,
	        default: "Authorization"
	      }
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions, which for payments could cost the client issues like double-billing.
          required: true
          schema: {
	        type: string,
	        default: "Client-Request-Id"
	      }
        - in: header
          name: Content-Type
          description: >-
           used to indicate the media type of the resource.
          required: true
          schema: {
          type: string,
	        default: "Content-Type"
	      }
        - in: path
          name: merchantTransactionId
          description:  This is provided by merchant at the time of payment initialization.
          required: true
          schema: {
	        type: string,
	        default: "merchantTransactionId"
	      }
        - in: query
          name: start
          description:  Date range - start
          required: false
          allowEmptyValue: false
          schema: {
	        type: string,
	        default: "start"
	      }
        - in: query
          name: end
          description:  Date range - end
          required: false
          allowEmptyValue: false
          schema: {
	        type: string,
	        default: "end"
	      }
        - in: query
          name: pageNo
          description:  Page number
          required: false
          allowEmptyValue: false
          schema:
            type: integer
        - in: query
          name: pageSize
          description:  Page pageSize
          required: false
          allowEmptyValue: false
          schema:
            type: integer

      responses:
        '200':
          description: Transactions response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
        '400':
          description:  Transactions response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Transactions response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Transactions response - Recipient not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Transactions response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
                
  /ddp/v1/transactions:
    get:
      x-group-name: Transaction Service
      x-proxy-name: Get Transactions
      # x-child-product-name: Transaction Service
      tags:
        - Digital Disbursement Platform Transactions APIs.
      description: This API returns all transactions associated with merchant. This included transactions Initialized and Disbursed both.
      parameters:
        - in: header
          name: Api-Key
          description: An API key is a string value passed by a client app to the API proxies. The key uniquely identifies the client app.
          required: true
          schema: {
	        type: string,
	        default: "Api-Key"
	      }
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema: {
	        type: string,
	        default: "Timestamp"
	      }
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema: {
	        type: string,
	        default: "Authorization"
	      }
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions, which for payments could cost the client issues like double-billing.
          required: true
          schema: {
	        type: string,
	        default: "Client-Request-Id"
	      }
        - in: header
          name: Content-Type
          description: >-
           used to indicate the media type of the resource.
          required: true
          schema: {
          type: string,
	        default: "Content-Type"
	      }
        - in: query
          name: start
          description:  Date range - start
          required: false
          allowEmptyValue: false
          schema: {
	        type: string,
	        default: "start"
	      }
        - in: query
          name: end
          description:  Date range - end
          required: false
          allowEmptyValue: false
          schema: {
	        type: string,
	        default: "end"
	      }
        - in: query
          name: pageNo
          description:  Page number
          required: false
          allowEmptyValue: false
          schema:
            type: integer
        - in: query
          name: pageSize
          description:  Page pageSize
          required: false
          allowEmptyValue: false
          schema:
            type: integer

      responses:
        '200':
          description: Transactions response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipientTransactionRespsone'
        '400':
          description:  Transactions response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Transactions response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Transactions response - Recipient not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Transactions response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /ddp/v1/transactions/{transactionId}:
    get:
      x-group-name: Transaction Service
      x-proxy-name: Get Transaction
      # x-child-product-name: Transaction Service
      tags:
        - Digital Disbursement Platform Transactions APIs.
      description: This API returns all transactions associated for a given transaction Id or merchant transaction Id.
      parameters:
        - in: header
          name: Api-Key
          description: An API key is a string value passed by a client app to the API proxies. The key uniquely identifies the client app.
          required: true
          schema: {
	        type: string,
	        default: "Api-Key"
	      }
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema: {
	        type: string,
	        default: "Timestamp"
	      }
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema: {
	        type: string,
	        default: "Authorization"
	      }
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions, which for payments could cost the client issues like double-billing.
          required: true
          schema: {
	        type: string,
	        default: "Client-Request-Id"
	      }
        - in: header
          name: Content-Type
          description: >-
           used to indicate the media type of the resource.
          required: true
          schema: {
          type: string,
	        default: "Content-Type"
	      }
        - in: path
          name: transactionId
          description:  transactionId associated with a transaction.
          required: true
          schema: {
	        type: string,
	        default: "transactionId"
	      }

      responses:
        '200':
          description: Transactions response - Success
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/TransactionRespsone'
        '400':
          description:  Transactions response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Transactions response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Transactions response - Recipient not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Transactions response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

  /ddp/v1/transactions/{transactionId}/payments/{paymentId}:
    get:
      x-group-name: Transaction Service
      x-proxy-name: Get Payment
      # x-child-product-name: Transaction Service
      tags:
        - Digital Disbursement Platform Transactions APIs.
      description: This API retuns a payment transaction record associated with transaction id and payment id.
      parameters:
        - in: header
          name: Api-Key
          description: An API key is a string value passed by a client app to the API proxies. The key uniquely identifies the client app.
          required: true
          schema: {
	        type: string,
	        default: "Api-Key"
	      }
        - in: header
          name: Timestamp
          description: Epoch timestamp in the request initiating system
          required: true
          schema: {
	        type: string,
	        default: "Timestamp"
	      }
        - in: header
          name: Authorization
          description: Authorization information for the request. Format- `HMAC {hmacToken}`
          required: true
          schema: {
	        type: string,
	        default: "Authorization"
	      }
        - in: header
          name: Client-Request-Id
          description: Contains a unique ID generated by the client that can be used for enforcing idempotency on POST actions. POSTs are inherently non-idempotent and submitting the exact same request multiple times would create duplicate resources.
            Note:- Omitting this header increases the risk of duplicate transactions, which for payments could cost the client issues like double-billing.
          required: true
          schema: {
	        type: string,
	        default: "Client-Request-Id"
	      }
        - in: header
          name: Content-Type
          description: >-
           used to indicate the media type of the resource.
          required: true
          schema: {
          type: string,
	        default: "Content-Type"
	      }
        - in: path
          name: transactionId
          description:  TransactionId/merchantTransactionId associated with a transaction.
          required: true
          schema: {
	        type: string,
	        default: "transactionId"
	      }
        - in: path
          name: paymentId
          description:  PaymentId associated with a transaction.
          required: true
          schema: {
	        type: string,
	        default: "paymentId"
	      }

      responses:
        '200':
          description: Transactions response - Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePaymentResponse'
        '400':
          description:  Transactions response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: Transactions response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '404':
          description: Transactions response - Recipient not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Transactions response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'

components:
  schemas:
#------------------------------------------
# Request/ Reponse Model
#------------------------------------------
    RecipientTransactionRespsone:
      description: Model for events that are published when triggered in the system, or as part of a process like a transaction.
      type: object
      required:
      - transactions
      properties:
        transactions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Transaction'
        pages:
           $ref: '#/components/schemas/PageLink'

    TransactionRespsone:
      description: Model for events that are published when triggered in the system, or as part of a process like a transaction.
      type: object
      required:
      - transactions
      properties:
        transactions:
           $ref: '#/components/schemas/Transaction'
        pages:
           $ref: '#/components/schemas/PageLink'

    Transaction:
      description: Model for events that are published when triggered in the system, or as part of a process like a transaction.
      type: object
      required:
      - transactionId
      - source
      - eventData
      - transactionStatus
      properties:
       transactionId:
         description: Uniquely identifies an event and related message.
         type: string
         example: "c2RnYXJ0aHR3ZXN3eXNkVVC"
       merchantTransactionId:
          $ref: '#/components/schemas/MerchantTransactionId'
       batchNumber:
          description: Provided by FED to merchant.
          type: string
          example: "c2RnYXJ0aHR3ZXN3eXNkVVC"
          writeOnly: true
       paymentReferenceNumber:
          description: Reference number provided by merchant
          type: string
          example: "1234567790"
          writeOnly: true
       created:
         description: Epoch timestamp in the initiating system for the event
         type: number
         example: 1501725477
       applyDate:
          description: The date transaction should be initialized.
          type: string
          example: "04/03/2021"
       transactionDate:
          description: The date transaction was created.
          type: string
          example: "04/03/2021"
       updateDate:
          description: The date transaction was update.
          type: string
          example: "04/03/2021"
       reason:
          description: Reason for payment cancellation
          type: string
          example: Transaction amount does not match
       recipient:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PaymentRespsone'
       transactionStatus:
           $ref: '#/components/schemas/TransactionStatus'
       totalTransactionAmount:
          $ref: '#/components/schemas/Amount'
          
    Transactions:
      description: Model for events that are published when triggered in the system, or as part of a process like a transaction.
      type: object
      required:
      - transactionId
      - source
      - eventData
      - transactionStatus
      properties:
       transactionId:
         description: Uniquely identifies an event and related message.
         type: string
         example: "c2RnYXJ0aHR3ZXN3eXNkVVC"
       merchantTransactionId:
          $ref: '#/components/schemas/MerchantTransactionId'
       batchNumber:
          description: Provided by FED to merchant.
          type: string
          example: "c2RnYXJ0aHR3ZXN3eXNkVVC"
          writeOnly: true
       paymentReferenceNumber:
          description: Reference number provided by merchant
          type: string
          example: "1234567790"
          writeOnly: true
       created:
         description: Epoch timestamp in the initiating system for the event
         type: number
         example: 1501725477
       applyDate:
          description: The date transaction should be initialized.
          type: string
          example: "04/03/2021"
       transactionDate:
          description: The date transaction was created.
          type: string
          example: "04/03/2021"
       updateDate:
          description: The date transaction was update.
          type: string
          example: "04/03/2021"
       reason:
          description: Reason for payment cancellation
          type: string
          example: Transaction amount does not match
       recipient:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PaymentRespsone'
       transactionStatus:
           $ref: '#/components/schemas/TransactionStatus'
       totalTransactionAmount:
          $ref: '#/components/schemas/Amount'

    SinglePaymentResponse:
      description: Model for events that are published when triggered in the system, or as part of a process like a transaction.
      type: object
      required:
        - recipient
      properties:
        recipient:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PaymentRespsone'
        transactionStatus:
            $ref: '#/components/schemas/TransactionStatus'
        totalTransactionAmount:
            $ref: '#/components/schemas/Amount'

    PaymentRespsone:
      description: Details about notfication message.
      type: object
      required:
        - merchantCustomerId
        - recipientId
        - merchantTransactionId
        - payments
      properties:
        merchantCustomerId:
            $ref: '#/components/schemas/MerchantCustomerId'
        recipientId:
          $ref: '#/components/schemas/RecipientId'
        accountId:
          $ref: '#/components/schemas/AccountId'
        payments:
            $ref: '#/components/schemas/PaymentInfo'
        source:
            $ref: '#/components/schemas/FundingSourceType'
        alias:
          description: Last four values of the cardNumber/account#
          type: string
          readOnly: true
          example: "xxxx"
        doingBusinessAs:
          description: Recipient Company name
          type: string
          readOnly: true
          example: "Demo Business"
        firstName:
          description: Recipient first name
          type: string
          readOnly: true
          example: "Sams"
        LastName:
          description: Recipient last name
          type: string
          readOnly: true
          example: "S"
        groupName:
          description: A merchant group name associated with transaction.
          type: string
          readOnly: true
          example: "AMERICANLIFE"
#-------------------------
# Oject Model
#-------------------------
    Amount:
      description: Information about an ACH account
      type: object
      required:
      - total
      - currency
      properties:
        total:
          description: Indicates total amount
          type: number
          example: 100.00
        currency:
          description: Indicates currency code for total amount
          type: string
          example: "USD"

    Link:
      description: Model to communicate linked resources.
      type: object
      required:
        - href
        - rel
      properties:
        href:
          description: URL to linked resource.
          type: string
          format: uri
        rel:
          description: Defines the type of link relationship to current resource.
          type: string
          enum:
            - current.page
            - previous.page
            - next.page
            - self
          example:
            "self"
        method:
          description: Defines the HTTP method for the given href.
          type: string
          default: "GET"
          example:
            "GET"

    PaymentInfo:
      description: Details about recipient and amount associated with the recipient.
      type: object
      required:
        - paymentType
      properties:
        paymentId:
          description: Unique Identifier provided by disbursement platform at the time of initialization per recepient.
          type: string
          example: "8a34144657d0aa6e0157d3808ed000f2"
          readOnly: true
        amount:
          $ref: '#/components/schemas/Amount'
        fee:
          $ref: '#/components/schemas/Amount'
        paymentType:
          description: Type of disbursement - wages, claims, promotions, loans, refund etc
          example: "wages"
          type: string
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
        paymentDate:
          description: The date payment was created.
          type: string
          example: "04/03/2021"

    PageLink:
      description: Page link information.
      type: object
      readOnly: true
      properties:
        firstPage:
          type: boolean
          description: Indicates if the list contains first page data
        lastPage:
          type: boolean
          description: Indicates if the list contains last page data
          example: false
        currentPage:
          type: integer
          description: Current page number
          example: 1
        currentPageRecords:
          type: integer
          description: Number of records in current page
          example: 25
        totalPages:
          type: integer
          example: 2
        totalRecords:
          type: integer
          example: 27
        sortOrder:
          type: string
          enum:
            - asc
            - desc
          example: asc
          default: asc
        _links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    MerchantTransactionId:
      description: This is provided by merchant at the time of payment initialization.
      type: string
      maxLength: 75
      example: vendorId-0987613457398475

    AccountId:
      description: The unique Id generated at the time of card/account vaulting. This can be used if the card/account infomration is already available in DDP system. If accountId is provided then fundingInformation is not required.
      type: string
      maxLength: 75
      example: "292bb6b886fc4446894f878b7e32bd5e"
#-------------------------------------
# Common Models
#-------------------------------------

    RecipientId:
      description: Unique Key to look up the Recipient Profile.
      type: string
      readOnly: true
      example: 0d3c99f9-d7dd-4e0e-9c86-71d189ecdc95

    MerchantCustomerId:
      description: MerchantCustomerId provided by client for each recipient.
      type: string
      example: 00009876543234567


#-------------------------------------
# Error Models
#-------------------------------------

    Error:
      description: (Response Only) Model for error messaging
      type: object
      properties:
        code:
          type: string
          description: >-
            Uniquely identifies an error condition. Client applications need to
            read and handle errors based on this.
        message:
          type: string
          description: A generic description of the error condition.
        category:
          type: string
          description: The resource associated with the error condition.
        developerInfo:
          type: object
          description: >-
            Information that needs to be understood by the client developers and
            should not be interpreted for application processing.
          properties:
            developerMessage:
              type: string
              description: An elaborative description of the error description.
            moreInfo:
              type: string
              description: Link to the error in Developer page.
            fieldError:
              description: Detailed information about message format errors.
              type: array
              items:
                properties:
                  field:
                    description: The property or attribute associated with the error
                    type: string
                  message:
                    description: Information specific to a property or attribute.
                    type: string
      example:
        code: '40000'
        message: Example Error
        category: example
        developerInfo:
          developerMessage: Invalid Message format in request payload
          moreInfo: 'https://www.example.com/errors/40000'
          fieldError:
            - field: example id
              message: exampleId is mandatory


#-------------------------------------
# ENUM Models
#-------------------------------------
    TransactionStatus:
      title: Transaction Status
      description: Indicates the status of an Transaction initialization operation.
      type: string
      readOnly: true
      enum:
        - TF
        - PA
        - PD
        - IP
        - TC
        - TV
        - TE

    PaymentStatus:
      title: Payment Status
      description: Indicates the status of an Payment with respespect of each payment operation.
      type: string
      readOnly: true
      enum:
        - DF
        - DP
        - DS
        - DA
        - DR
        - DI
        - DD
        - DH
        - DC
        - PE
        - PC
        - AF
        - RE
        - IP
        - RP
        - RS
        - RF
        - DNF

    AccountType:
      title: AccountType
      description: Indicates the Type of Account.
      type: string
      readOnly: true
      enum:
        - CHECKING
        - SAVINGS

    RecipientStatus:
      title: Status
      description: Indicates the status of an Auhtrization operation.
      type: string
      readOnly: true
      enum:
        - NOT_REGISTERED
        - ACTIVE
        - LOCKED
        - HOLD
        - CLOSED

    FundingSourceType:
      description: Describes the type of Funding source
      type: string
      readOnly: true
      enum:
        - CREDIT
        - DEBIT
        - ACH
        - PREPAID
        - TOKEN
        - VENMO
        - PAYPAL

    RecipientIdentifier:
      description: Recipient's Identification Type.
      type: string
      readOnly: false
      enum:
        - Last_4_of_SSN
        - SPECIAL_CODE
        - ACCOUNT_NUMBER

    Requestor:
      description: This is to identify request requestor.
      type: string
      readOnly: false
      enum:
        - MERCHANT
        - RECIPIENT

    Reason:
      description: Reason code for the status Change Or Create
      type: string
      enum:
        - CLIENT_INITIATED
        - RECIPIENT_INITIATED
        - SYSTEM_INITIATED
        - FISERV_INITIATED
      default: CLIENT_INITIATED
      readOnly: true

#-------------------------------------
# response Models
#-------------------------------------

    NoContent:
      description: The request succeeded but there is really nothing to show.
    BadRequest:
      description: Bad request
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
    NotFound:
      description: Not Found - The requested resource doesn't exist.
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    Conflict:
      description: >-
        Conflict - The requested operation conflicts with the current state of
        the identified resource.
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
    ServerError:
      description: An unexpected server error occured.
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
