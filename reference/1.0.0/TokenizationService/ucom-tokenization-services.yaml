#-------------------------------------
# Initial Version
#-------------------------------------
openapi: 3.0.0
info:
  version: 0.0.3
  title: Ucom APIs
  description: This Specification document lists the APIs required for Tokenization.

servers:
  - url:  https://qa.api.firstdata.com
    description: This url is for QA testing.
  - url:  https://int.api.firstdata.com
    description: This url is for customer testing.
  - url: https://prod.api.firstdata.com
    description: This is production url.
    
paths:
  /ucom/v1/tokens:
    post:
      x-group-name: Tokenization Services
      x-proxy-name: Retrieve Token & Encryption Key 
      tags:
        - Digital Disbursement Platform - Create a public token
      summary: create and retrieve public token and Encryption Key
      description: Initiate a session in order to create token and encryption key
      parameters:
        - { $ref: '#/components/parameters/AuthorizationHeader'}
        - { $ref: '#/components/parameters/ApiKeyHeader' }
        - { $ref: '#/components/parameters/TimestampHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }
        - { $ref: '#/components/parameters/ContentTypeHeader' }
      requestBody:
       description: Details required to create New token and encryption key.
       required: true
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/TokenRequest'

      responses:
        '201':
          description: New token Creation Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: New MN Card response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: New MN Card response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '409':
          description: New MN Card response - conflict response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: New MN Card response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
           
  /ucom/v1/account-tokens:
    post:
      x-group-name: Tokenization Services
      x-proxy-name: Account Token
      tags:
        - Digital Disbursement Platform - Create a public token
      summary: create and retrieve public token and Encryption Key
      description: Initiate a session in order to create token and encryption key
      parameters:
        - { $ref: '#/components/parameters/AccountAuthorizationHeader'}
        - { $ref: '#/components/parameters/ApiKeyHeader' }
        - { $ref: '#/components/parameters/TimestampHeader' }
        - { $ref: '#/components/parameters/ClientRequestIdHeader' }
        - { $ref: '#/components/parameters/ContentSignature' }
        - { $ref: '#/components/parameters/ContentTypeHeader' }

      requestBody:
       description: Details required to create New token and encryption key.
       required: true
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/AccountTokenRequest'
           examples:
              Debit Card Request:
                summary: Debit Request
                $ref: '#/components/examples/DebitCardRequest'
              ACH Request:
                summary: ACH Request
                $ref: '#/components/examples/ACHRequest'
              Money Network Request:
                summary: Money Network Request
                $ref: '#/components/examples/MoneyNetworkRequest'
              Coinbase Request:
                summary: Coinbase Request
                $ref: '#/components/examples/CoinbaseRequest'

      responses:
        '201':
          description: New token Creation Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTokenResponse'
        '400':
          description: New MN Card response - Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '401':
          description: New MN Card response - Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        '409':
          description: New MN Card response - conflict response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          description: New MN Card response - Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerError'
   
components:
  schemas:
#------------------------------------------
# Request/ Reponse Model
#------------------------------------------

   TokenRequest:
     description: This Request model is for Retrieve Token & Encryption Key
     type: object
     required:
        - token
        - publicKeyRequired
     properties:
        token:
          $ref: '#/components/schemas/Token'
        publicKeyRequired:
          type: boolean
          description: if public key is required is response.
          example: true
          
          
   AccountTokenRequest:
     description: This Request model is to Create the account Token
     type: object
     required:
        - account
        - referenceToken
        - fdCustomerId
     properties:
        account:
          $ref: '#/components/schemas/Account'
        referenceToken:
         $ref: '#/components/schemas/ReferenceToken'
        fdCustomerId:
         $ref: '#/components/schemas/FdCustomerId'
         
   Account:
     description: This is to hold account details
     type: object
     required:
      - type
      - credit
      - referenceToken
      - fdCustomerId
     properties:
      type:
        $ref: '#/components/schemas/Type'
      credit:
        $ref: '#/components/schemas/Credit'
      referenceToken:
        $ref: '#/components/schemas/ReferenceToken'
      fdCustomerId:
        $ref: '#/components/schemas/FdCustomerId'
    
   Credit:
    description: This is to hold user account details and address
    type: object
    required:
      - cardNumber
      - nameOnCard
      - cardType
      - billingAddress
      - expiryDate
      - referenceToken
      - fdCustomerId
    properties:
     cardNumber:
      $ref: '#/components/schemas/CardNumber'
      nameOnCard:
          type: string
          description: Name printed on card.
          example: "Test Card"
      cardType:
         type: string
         description: type of card.
         example: "VISA"
      billingAddress:
         $ref: '#/components/schemas/BillingAddress'
      expiryDate:
         $ref: '#/components/schemas/ExpiryDate'
      referenceToken:
         $ref: '#/components/schemas/ReferenceToken'
      fdCustomerId:
         $ref: '#/components/schemas/FdCustomerId'
         
   BillingAddress:
     description: A physical mailing address for this card holder.
     type: object
     required:
      - type
      - streetAddress
      - houseNumberOrName
      - locality
      - region
      - postalCode
      - country
     properties:
        type:
          description: Canonical type values of "work", "home", "billing" and "other".
          type: string
          example: Work
        houseNumberOrName:
          description: House number or name of the address
          type: string
          example: 2205 Apt 298
        streetAddress:
          description: The full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information.
          type: string
          example: 100 Universal City Plaza
        locality:
          description: The city or locality component.
          type: string
          example: Hollywood
        region:
          minLength: 2
          maxLength: 2
          description: The sender's province, state or territory. Conditional, required if sender's country is USA. Must be an ISO 3166-2 uppercase alpha 2 character country subdivision code. For example, Missouri is MO.
          type: string
          example: CA
        postalCode:
          minLength: 1
          maxLength: 10
          description: Required. The sender's postal code. For USA, this must be a valid value of 5 digits or 5 digits hyphen 4 digits, for example '63368', '63368-5555'. For other regions, this can be alphanumeric, length 1-10.
          type: string
          example: 91608
        country:
          description: The sender's country as an ISO 3166-1 uppercase alpha-3 country code; For example, the United States of America is USA.
          type: string
        formatted:
          description: The full mailing address, formatted for display or use with a mailing label.
          type: string
          example: "2205 Apt 298, 100 Universal City Plaza\nHollywood, CA 91608 USA"
        primary:
          description: Indicates if this is the default address for the associated resource. It only has meaning when used in a set or array of addresses.
          type: boolean
          default: false
     example:
        type: "work"
        street: "100 Universal City Plaza"
        city: "Hollywood"
        stateOrProvince: "CA"
        postalCode: "91608"
        country: "US"
        formatted: "100 Universal City Plaza\nHollywood, CA 91608 US"
        primary: true
  
   ExpiryDate:
      description: Payment card expiry date that is month(MM) and year(YY). Response will have these values for the card
      type: object
      required:
      - month
      - year
      properties:
        month:
          type: string
          description: Encrypted month
          example: 'ENC_[XXXX...]'
        year:
          type: string
          description: Encrypted year
          example: 'ENC_[XXXX...]'
          
   AccountTokenResponse:
     description: Response after generating token for an account type
     type: object
     required:
        - type
        - token
     properties:
        type:
          $ref: '#/components/schemas/Type'
        token:
          $ref: '#/components/schemas/ReferenceToken'
          
   TokenResponse:
     description: Response after generating token for an customerId
     type: object
     required:
        - tokenId
        - status
        - issuedOn
        - expiresInSeconds
        - algorithm
        - publicKey
     properties:
        tokenId:
          description: Actual token value
          type: string
          example: "292bb6b886fc4446894f878b7e32bd5e"
        status:
          $ref: '#/components/schemas/Status'
        issuedOn:
          description: Date when the token was issues
          type: string
          example: "1501502067595"
        expiresInSeconds:
          description: time left for the token to 1199
          type: string
          example: "1501502067595"
        algorithm:
          $ref: '#/components/schemas/Algorithm'
        publicKey:
          description: publicKey
          type: string
          

#-------------------------------------
# response Models
#-------------------------------------
   NoContent:
      description: The request succeeded but there’s really nothing to show.
      example: {}

   BadRequest:
    description: Bad request
    type: object
    properties:
      error:
        $ref: '#/components/schemas/Error'

   Unauthorized:
     description: Unauthorized

   NotFound:
    description: Not Found - The requested resource doesn't exist.
    type: object
    properties:
      error:
         $ref: '#/components/schemas/Error'

   Conflict:
      description: Conflict - The requested operation conflicts with the current state of the identified resource.
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
       
        
   ServerError:
      description: An unexpected server error occured.
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
##-------------------------------------
## Object Model
##------------------------------------
   Token:
     description: Information about a customer to get token.
     type: object
     required:
      - fdCustomerId
     properties:
      fdCustomerId:
        type: string
        description: customer id.
        maxLength: 32
           
   ReferenceToken:
      description: Surrogate value used to represent a handle to an account without sharing PCI/PII data to look it up.
      type: object
      required:
      - tokenId
      - tokenProvider
      - tokenType
      properties:
        tokenId:
          description: Actual token value
          type: string
          example: "292bb6b886fc4446894f878b7e32bd5e"
        tokenProvider:
          type: string
          example: "UCOM"
        tokenType:
          type: string
          example: "CLAIM_CHECK_NONCE"
    
   NVP:
      title: Name and Value pair.
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        valueAsList:
          type: array
          minItems: 0
          items:
            type: string
        
#-------------------------------------
# Common Models
#-------------------------------------
   FdCustomerId:
      type: string
      description: customer id.
      maxLength: 32
    
   CardNumber:
      description: Encrypted card number
      type: string
      example : "ENC_[xxxxxxxxxxxxxx]"
    
    
#-------------------------------------
# ENUM Models
#-------------------------------------
      
   Status:
      title: Token Status
      description: Indicates the status of the token retured for PCI data.
      type: string
      readOnly: true
      enum:
        - APPROVED
        - DECLINED
        - PENDING
        - CANCELLED
        - ACTIVE
        - INACTIVE
   
   Algorithm:
      title: Algorithm
      description: Algorithm used for encryption.
      type: string
      readOnly: true
      enum:
        - RSA
        - NONE
        - PKCS1PADDING
      
#-------------------------------------
# Error Models
#-------------------------------------

   Error:
      description: (Response Only) Model for error messaging
      type: object
      properties:
        code:
          type: string
          description: Uniquely identifies an error condition. Client applications need to read and handle errors based on this.
        message:
          type: string
          description: A generic description of the error condition.
        category:
          type: string
          description: The resource associated with the error condition.
        developerInfo:
          type: object
          description: Information that needs to be understood by the client developers and should not be interpreted for application processing.
          properties:
            developerMessage:
              type: string
              description: An elaborative description of the error description.
            moreInfo:
              type: string
              description: Link to the error in Developer page.
            fieldError:
              description: Detailed information about message format errors.
              type: array
              items:
                properties:
                  field:
                    description: The property or attribute associated with the error
                    type: string
                  message:
                    description: Information specific to a property or attribute.
                    type: string
        hostExtraInfo:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/NVP'
          uniqueItems: true
      example:
        code: "40000"
        message: "Example Error"
        category: "example"
        developerInfo:
          developerMessage: "Invalid Message format in request payload"
          moreInfo: "https://www.example.com/errors/40000"
          fieldError:
            - field: "example id"
              message: "exampleId is mandatory"
#-------------------------------------
# ENUM Models
#-------------------------------------

   Type:
      title: Account type
      description: Indicates the type of account.
      type: string
      readOnly: true
      enum:
        - CREDIT
        - ACH
        - MONEYNETWORK
        - COINBASE
      example: "CREDIT"
#------------------------------------------
# Header Params
#------------------------------------------
  parameters:
    ApiKeyHeader:
      in: header
      name: Api-Key
      description: >-
        An API key is a string value passed by a client app to the API
        proxies. The key uniquely identifies the client app.
      required: true
      schema: {
	      type: string,
	      default: "Api-Key"
	  }
      example: Value supplied by Dev Studio
    TimestampHeader:
      in: header
      name: Timestamp
      description: >-
        Epoch timestamp in the request initiating system
      required: true
      schema: {
	      type: string,
	      default: "Timestamp"
	  }
      example: Value supplied by Dev Studio
    AuthorizationHeader:
      in: header
      name: Authorization
      description: >-
        Authorization information for the request. Format- `HMAC
        {hmacToken}`
      required: true
      schema: {
	     type: string,
	     default: "Authorization"
	  }
      example: Value supplied by Dev Studio
    ClientRequestIdHeader:
      in: header
      name: Client-Request-Id
      description: >-
        Contains a unique ID generated by the client that can be used for
        enforcing idempotency on POST actions. POSTs are inherently
        non-idempotent and submitting the exact same request multiple times
        would create duplicate resources.

        Note:- Omitting this header
        increases the risk of duplicate transactions.
      required: true
      schema: {
	      type: string,
	      default: "Client-Request-Id"
	   }
      example: Value supplied by Dev Studio
    ContentSignature:
      in: header
      name: Content-Signature
      description: >-
        Signature for the request. Format- `HMAC
        {hmacToken}`
      required: true
      schema: {
	        type: string,
	        default: "Content-Signature"
	  }
      example: Value supplied by Dev Studio
    AccountAuthorizationHeader:
      in: header
      name: Authorization
      description: >-
        Authorization information for the request. Format- `Bearer
        {accessToken}`
      required: true
      schema: {
	     type: string,
	     default: "AccountAuthorizationHeader"
	  }
      example: Value supplied by Dev Studio
    ContentTypeHeader:
      in: header
      name: Content-Type
      description: >-
        used to indicate the media type of the resource.
      required: true
      schema: {
	      type: string,
	      default: "application/json"
	  }
      example: application/json
#------------------------------------------
# Error Responses 
#------------------------------------------
  responses:
    BadRequest:
      description: Invalid request format/data.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            {
              "code": "400005",
              "message": "Invalid request format/data.",
              "category": "common",
              "developerInfo": {
                "developerMessage": "Invalid request format/data.",
                "fieldError": [
                  {
                    "field": "doingBusinessAs",
                    "message": "Doing Business As is missing."
                  }
                ]
              }
            }
    Unauthorized:
       x-model-version: 1.0
       description: Invalid requestor or Authorization.
       content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            {
              "code": "401021",
              "message": "Invalid requestor or Authorization",
              "developerInfo": {
                  "developerMessage": "Invalid requestor or Authorization"
              }
            }
    NotFound:
       x-model-version: 1.0
       description: The requested resource does not exist.
       content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            {
              "code": "404001",
              "message": "No data found for the request.",
              "category": "common",
              "developerInfo": {
                  "developerMessage": "No data found for the request."
              }
            }
    Conflict:
       x-model-version: 1.0
       description: The requeste conflict with existing record.
       content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            {
              "code": "409001",
              "message": "Conflict with existing record.",
              "category": "common",
              "developerInfo": {
                "developerMessage": "Conflict with existing record.",
                "fieldError": [
                  {
                    "field": "merchantCustomerId",
                    "message": "Merchant Customer Id must be unique."
                  }
                ]
              }
            }
    RequestTimeout:
       x-model-version: 1.0
       description: The request was timed out due.
       content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            {
              "code": "408",
              "message": "The request was timed out.",
              "category": "common",
              "developerInfo": {
                  "developerMessage": "The request was timed out."
              }
            }
    ServerError:
      x-model-version: 1.0
      description: An unexpected internal server error occurred.
      content:
        application/json:
          schema: {$ref: '#/components/schemas/Error'}
          example:
            {
              "code": "500",
              "message": "An unexpected internal server error occurred.",
              "category": "common",
              "developerInfo": {
                  "developerMessage": "An unexpected internal server error occurred."
              }
            }
#-------------------------------------
# Examples
#-------------------------------------  
  examples:
    DebitCardRequest:
      value: {
		 "account": {
		 	"type": "CREDIT",
		 	"credit": {
			 	"cardNumber": 
						"ENC_[sitvMdxL4hGKBRa/kb50DoPDx7otG9asdJmKqVKxPfMj0Z8XYu5rZWkfNtP1r8hJX66rsMGFwRhp+2a
						LFKa8cNfMiNYOLkXg7mnmoIKwIlpuTp4Zd5Iq1JFxPCF93qzt+695xwzxpbIlck/r73RvLNbA5W2xr0mT+DqS
						DaJcXh5e3KdJxvRCSccP4H9jm2JVY/ycxzp5KOOcg5CLNHSPs/zUhv8joWYzC6X7yeFAuKxfd7MZQUa8RrLTb
						SOArjcoFd2xfzbWDxKMBRAcnRP7fkMPI0Ganrq1DxtPlXo2torULjDI+HCy3c0LzPsLefCNO5tGLKRS72jxJs
						R1rNGdig==]",
				"nameOnCard": "Test Card",
				"cardType": "VISA",
				"billingAddress": {
				"type": "work",
				"streetAddress": "100 Universal City Plaza",
				"locality": "Hollywood",
				"region": "CA",
				"postalCode": "91608",
				"country": "USA",
				"formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
				"primary": true
		     },
			 "expiryDate": {
					 "month": 
						"ENC_[vnfAU9JDPLl5OJ+eLIZF0HcRASd+zrPIex5obL7Rg5qmCZ3Bo6Q+ne7r9G4W4LbrvNPKYFtc6z8F+N+
						cQXWJ6cYacATYmXKGsnl3WDBpeJbk4vE4LdDNKyHiqooWYWf9MgUdUD93H/PD6/O0lIQqkFd/Wovjzml9s/9Z
						hhET8KBkZ7N8l/S0CmtqSIXBiGbfALY+XSZLgi7GrtZIswLvJ2Au+3oWNjjPOZNydIBh/YBTWQr8vzNsNKwWB
						mTV0cTJQfqiKZj3f9HQNdZxYVuuGRgoCiwrB0Wuk++Pl0bG0qcgtYxpOgyXDCfvXeweC0qaCOGou4/v4Q3yMg
						wgJnygWQ==]",
					 "year": 
						"ENC_[WT800lqjn0jPf925tLYj+zuQOcmVTt/0dUSMwBibYFlM3qGODukUKWQ1XR7jy34lW+jBHRKPZc0/7Xw
						zCIhIennGeK+wGHGF/yrjDYo/wEnxZq7oudQfrZLhB7uWE4fwzkYJfavrB/ESFasM/QxszSDo7wILh/F/30x8
						8Nv5BDY5JYlIths2pYmf/gpJAJADGiJib68XEt6tNXj0irscmPxIisAEm7E1dnCB2N37QwEwdwoyU3z8pTzy/
						/ecrQwtW2sRYEcSzS4zMj2BtPTwRYLnBUP9gxmzgKy+owokH0R5MjMZzSYo/7pb8HnbIOIHbJv8XVTFBJGin1
						WaQ7WiOg==]"
		          }
		     }
		 },
		 "referenceToken": {
		 	"tokenType": "CLAIM_CHECK_NONCE"
		 },
		 "fdCustomerId": "TestConsumer123"
    }
    
    ACHRequest:
     value : {
		   "account": {
			 "type": "ACH",
			 "ach": {
					 "accountNumber": 
							"ENC_[MTSNPKj0ElVxwXy2Kobg+TR+192HwLUoYT4HUTB7UVTRU7HvjdeTPDTBukygQCPIgqLRO2z44i4/R4C
							s+SHlKhtzTlylCOwyAyyMoLJgkDvX550x9as7ii2mzIF3rXxq0GZSS6hRlRIDXamDYRB7A7jB5XYlskBcOZHx
							onSPdIAOy4pPwXbVZ1HgW+UWh23ctK4ZCmk3cTuZaZLeLQuS/0LBysa8m2gqrFZdHVnahRC6TCVvuN3xObbaH
							HB1rEm5TTKUI0QF4gUFLXsSXvvb7yf2oWHheBAqPqbjasK+qDpWmS2+WPIJapSgXMFBy0I38X8cldOBGFZWQm
							r7nC7D/w==]",
					  "routingNumber": "021000021",
						"bankName": "XYZ",
						"secCode": "BUSINESS",
            "billingAddress": {
						   "type": "work",
						   "streetAddress": "100 Universal City Plaza",
						   "locality": "Hollywood",
						  "region": "CA",
						  "postalCode": "91608",
						  "country": "USA",
						  "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
						  "primary": true
			    }
			  }
		 },
		 "referenceToken": {
		 	"tokenType": "CLAIM_CHECK_NONCE"
		 },
		 "fdCustomerId": "TestConsumer123"
		}
		
    MoneyNetworkRequest:
     value: {
		 "account": {
				 "type": "MONEYNETWORK",
				 "moneyNetwork": {
				 "firstName": "Vineet",
				 "lastName": "Singh",
				 "billingAddress": {
						 "type": "work",
						 "streetAddress": "100 Universal City Plaza",
						 "locality": "Hollywood",
						 "region": "CA",
						 "postalCode": "91608",
						 "country": "USA",
						 "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
						 "primary": true
				 },
				"cardNumber": 
						"ENC_[IZVZ7YTVKFIh3s49d/loozmgb/eLWNYgQXt5UgeVWbwxQRlXZkxZQbeGeZFqH2/X5PwmiD3Al2deC0U
						g5ivkKwcM3eQxHgXVBPPZKSbcnrIFNmIqvY0ioJp3WDHsv9THYiA8iRzE8Z63vXhKjYYmnkIU6clHv3NR6hDQ
						tMF2wWGSerWoIeUW01EtapEbmcnGy5AGV1b6fRQQmK99exMit17KEzsu+4fD9Mo8gP9Q7KoCWM8DjJ9/SNoaJ
						DNjmFq4t9AlJJiK4+5w3Fgd1LiSbgBTCSF6o63Lb9UtekxnAFBB9TkFskzDHLzDVHH1UFUfpsKT6J69O60x8u
						Pk3ohXIw==]"
				}
		  },
		 "referenceToken": {
		   "tokenType": "CLAIM_CHECK_NONCE"
		 },
		 "fdCustomerId": "TestConsumer312113"
	}
	
    CoinbaseRequest:
     value: {
		 "account": {
		 	"type": "ACH",
			 "ach": {
				 "accountNumber": 
					"ENC_[ocVcpauTU3SZ6AB8isDjoTXqa64a48d65Zu7DPocIcm2vtC/cqHjew2D9UkxaFikbw0EAI2HswD2Yj+
					fvnXx+qo16AeJSeSE/1G7Xz+EsY6/+Y3IDA+DgyI9rCycMoJfVGBgq83FBboRsvEOCcsu9gV//Bxh+UEcVPTa
					OkGuqO2HqpZiuNeJqLQmd1XRZL1eVw0MpjZ4/GEZjVNd+DU9aTxpr5U/SkEfG2OtHmqwRypdLj6mqeMl6w7a1
					ZUzY2RNTrdEBgGhKRftJsRslpQFPQSa62/MZp3QmvubXI2s1B+pTzB8QqaRParxUXJyRHOC2sjHbne6Li/i+h
					iZ2I5dwQ==]",
				 "routingNumber": "073972181",
				 "type": "Checking",
				 "billingAddress": {
				 "type": "work",
				 "streetAddress": "100 Universal City Plaza",
				 "locality": "Hollywood",
				 "region": "CA",
				 "postalCode": "91608",
				 "country": "USA",
				 "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
				 "primary": true
		      },
			  "assetProvider": {
				 "providerName": "coinbase"
			   }
			 }
		  },
		 "referenceToken": {
		 	"tokenType": "CLAIM_CHECK_NONCE"
		 },
		 "fdCustomerId": "n2l2u2ph"
	 }
     
    